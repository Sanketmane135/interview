import React, { useState, useEffect } from 'react';
import { Mic, MicOff, Square } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';

interface VoiceInputProps {
  onTranscription: (text: string) => void;
  disabled?: boolean;
}

export const VoiceInput: React.FC<VoiceInputProps> = ({
  onTranscription,
  disabled = false,
}) => {
  const [isRecording, setIsRecording] = useState(false);
  const [recognition, setRecognition] = useState<any>(null);
  const [transcript, setTranscript] = useState('');
  const { toast } = useToast();

  useEffect(() => {
    if (typeof window !== 'undefined' && ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognitionInstance = new SpeechRecognition();
      
      recognitionInstance.continuous = true;
      recognitionInstance.interimResults = true;
      recognitionInstance.lang = 'en-US';

      recognitionInstance.onstart = () => {
        setIsRecording(true);
      };

      recognitionInstance.onresult = (event: any) => {
        let finalTranscript = '';
        let interimTranscript = '';

        for (let i = event.resultIndex; i < event.results.length; i++) {
          const transcript = event.results[i][0].transcript;
          if (event.results[i].isFinal) {
            finalTranscript += transcript;
          } else {
            interimTranscript += transcript;
          }
        }

        setTranscript(finalTranscript + interimTranscript);
      };

      recognitionInstance.onend = () => {
        setIsRecording(false);
        if (transcript.trim()) {
          onTranscription(transcript.trim());
          setTranscript('');
        }
      };

      recognitionInstance.onerror = (event: any) => {
        console.error('Speech recognition error:', event.error);
        setIsRecording(false);
        toast({
          title: 'Speech Recognition Error',
          description: 'Please try again.',
          variant: 'destructive',
        });
      };

      setRecognition(recognitionInstance);
    } else {
      toast({
        title: 'Speech Recognition Not Supported',
        description: 'Your browser does not support speech recognition.',
        variant: 'destructive',
      });
    }

    return () => {
      if (recognition) {
        recognition.stop();
      }
    };
  }, []);

  const startRecording = () => {
    if (recognition && !isRecording) {
      setTranscript('');
      recognition.start();
    }
  };

  const stopRecording = () => {
    if (recognition && isRecording) {
      recognition.stop();
    }
  };

  return (
    <Card className="p-6">
      <div className="text-center space-y-4">
        <h3 className="text-lg font-semibold text-foreground">Voice Response</h3>
        
        <div className="flex justify-center">
          <Button
            onClick={isRecording ? stopRecording : startRecording}
            disabled={disabled || !recognition}
            size="lg"
            variant={isRecording ? 'destructive' : 'default'}
            className={`h-16 w-16 rounded-full transition-all duration-300 ${
              isRecording ? 'scale-110 shadow-glow' : 'hover:scale-105'
            }`}
          >
            {isRecording ? (
              <Square className="h-6 w-6" />
            ) : (
              <Mic className="h-6 w-6" />
            )}
          </Button>
        </div>

        <p className="text-sm text-muted-foreground">
          {isRecording
            ? 'Recording... Click to stop'
            : disabled
            ? 'Upload a PDF to enable voice input'
            : 'Click to start recording your response'}
        </p>

        {transcript && (
          <Card className="p-3 bg-accent text-accent-foreground">
            <p className="text-sm font-medium">Current transcription:</p>
            <p className="text-sm">{transcript}</p>
          </Card>
        )}
      </div>
    </Card>
  );
};


















import React, { useCallback, useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Upload, FileText, X } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';

interface PDFUploadProps {
  onFileUpload: (file: File) => void;
  uploadedFile: File | null;
  onFileRemove: () => void;
}

export const PDFUpload: React.FC<PDFUploadProps> = ({
  onFileUpload,
  uploadedFile,
  onFileRemove,
}) => {
  const { toast } = useToast();
  const [isDragActive, setIsDragActive] = useState(false);

  const onDrop = useCallback(
    (acceptedFiles: File[]) => {
      const file = acceptedFiles[0];
      if (file && file.type === 'application/pdf') {
        onFileUpload(file);
        toast({
          title: 'PDF uploaded successfully',
          description: `${file.name} is ready for analysis.`,
        });
      } else {
        toast({
          title: 'Invalid file type',
          description: 'Please upload a PDF file.',
          variant: 'destructive',
        });
      }
      setIsDragActive(false);
    },
    [onFileUpload, toast]
  );

  const { getRootProps, getInputProps } = useDropzone({
    onDrop,
    accept: { 'application/pdf': ['.pdf'] },
    maxFiles: 1,
    onDragEnter: () => setIsDragActive(true),
    onDragLeave: () => setIsDragActive(false),
  });

  if (uploadedFile) {
    return (
      <Card className="p-6 border-2 border-dashed border-success bg-gradient-accent">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className="p-2 rounded-lg bg-success text-success-foreground">
              <FileText className="h-6 w-6" />
            </div>
            <div>
              <h3 className="font-semibold text-foreground">{uploadedFile.name}</h3>
              <p className="text-sm text-muted-foreground">
                {(uploadedFile.size / 1024 / 1024).toFixed(2)} MB
              </p>
            </div>
          </div>
          <Button variant="ghost" size="sm" onClick={onFileRemove}>
            <X className="h-4 w-4" />
          </Button>
        </div>
      </Card>
    );
  }

  return (
    <Card className="border-2 border-dashed border-border hover:border-primary transition-colors">
      <div
        {...getRootProps()}
        className={`p-12 text-center cursor-pointer transition-all duration-300 ${
          isDragActive
            ? 'bg-gradient-primary text-primary-foreground scale-[1.02]'
            : 'hover:bg-accent'
        }`}
      >
        <input {...getInputProps()} />
        <div className="flex flex-col items-center space-y-4">
          <div
            className={`p-4 rounded-full transition-all duration-300 ${
              isDragActive
                ? 'bg-primary-foreground/20'
                : 'bg-primary text-primary-foreground'
            }`}
          >
            <Upload className="h-8 w-8" />
          </div>
          <div>
            <h3 className="text-lg font-semibold mb-2">
              {isDragActive ? 'Drop your PDF here' : 'Upload PDF Document'}
            </h3>
            <p className="text-muted-foreground">
              Drag and drop your PDF file here, or click to browse
            </p>
          </div>
          <Button variant={isDragActive ? 'secondary' : 'default'}>
            Choose File
          </Button>
        </div>
      </div>
    </Card>
  );
};










import React from 'react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Bot, User } from 'lucide-react';

interface Message {
  id: string;
  type: 'question' | 'answer';
  content: string;
  timestamp: Date;
}

interface ChatInterfaceProps {
  messages: Message[];
}

export const ChatInterface: React.FC<ChatInterfaceProps> = ({ messages }) => {
  return (
    <Card className="h-full flex flex-col">
      <div className="p-4 border-b bg-gradient-accent">
        <h2 className="text-lg font-semibold text-foreground">Q&A Session</h2>
        <p className="text-sm text-muted-foreground">
          AI will ask questions based on your document
        </p>
      </div>
      
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.length === 0 ? (
            <div className="text-center py-8">
              <div className="p-4 rounded-full bg-muted w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                <Bot className="h-8 w-8 text-muted-foreground" />
              </div>
              <h3 className="text-lg font-medium text-foreground mb-2">
                Ready to Start
              </h3>
              <p className="text-muted-foreground">
                Upload a PDF to begin the Q&A session
              </p>
            </div>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                className={`flex space-x-3 ${
                  message.type === 'answer' ? 'flex-row-reverse space-x-reverse' : ''
                }`}
              >
                <div
                  className={`p-2 rounded-full ${
                    message.type === 'question'
                      ? 'bg-primary text-primary-foreground'
                      : 'bg-success text-success-foreground'
                  }`}
                >
                  {message.type === 'question' ? (
                    <Bot className="h-4 w-4" />
                  ) : (
                    <User className="h-4 w-4" />
                  )}
                </div>
                <div
                  className={`flex-1 p-4 rounded-lg shadow-soft ${
                    message.type === 'question'
                      ? 'bg-accent text-accent-foreground'
                      : 'bg-primary text-primary-foreground'
                  }`}
                >
                  <p className="mb-1">{message.content}</p>
                  <span className="text-xs opacity-70">
                    {message.timestamp.toLocaleTimeString()}
                  </span>
                </div>
              </div>
            ))
          )}
        </div>
      </ScrollArea>
    </Card>
  );
};